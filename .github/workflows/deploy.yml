name: CI/CD - Build et Déploiement .NET sur Synology NAS

on:
  push:
    branches:
      - master # Déclenchement sur push sur la branche master

jobs:
  build:
    name: Build de l'application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0" # Adaptez selon votre version .NET

      # Restauration des dépendances pour le runtime linux-arm64
      - name: Restauration des dépendances
        run: dotnet restore -r linux-arm64

      # Build de l'application
      - name: Build de l'application
        run: dotnet build --configuration Release

      # Publication en self-contained avec le runtime linux-arm64
      - name: Publication de l'application
        run: dotnet publish -c Release -r linux-arm64 -o published --self-contained true --no-build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: published/

  check_architecture:
    runs-on: ubuntu-latest
    steps:
      - name: Vérifier l'architecture via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Architecture du NAS :"
            uname -m

  deploy:
    name: Déploiement sur Synology NAS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: published/

      - name: Copier les fichiers sur le Synology NAS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "published/"
          target: ${{ secrets.TARGET_PATH }}

      - name: Déployer l'application sur le NAS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Donner les permissions d'exécution au binaire (adaptez le nom de l'exécutable selon votre projet)
            chmod +x ${{ secrets.TARGET_PATH }}/published/${{ secrets.APP_NAME }}
            # Arrêter l'ancienne instance de l'application (s'il y en a une)
            pkill -f  || true
            # Lancer l'application en arrière-plan et rediriger la sortie vers un log
            nohup ${{ secrets.TARGET_PATH }}/published/${{ secrets.APP_NAME }} > ${{ secrets.TARGET_PATH }}/${{ secrets.APP_NAME }}.log 2>&1 &

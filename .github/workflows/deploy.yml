name: CI/CD - Build et Déploiement .NET sur Synology NAS

on:
  push:
    branches:
      - master # Déclenchement sur push sur la branche master

jobs:
  build:
    name: Build de l'application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0" # Adaptez selon votre version .NET

      # Restauration des dépendances pour le runtime linux-arm64
      - name: Restauration des dépendances
        run: dotnet restore -r linux-arm64

      # Build de l'application
      - name: Build de l'application
        run: dotnet build --configuration Release

      # Publication en self-contained avec le runtime linux-arm64
      - name: Publication de l'application
        run: dotnet publish -r linux-arm64 -o published --self-contained true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: published/

  deploy:
    name: Déploiement sur Synology NAS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: published/

      - name: Copier les fichiers sur le Synology NAS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "published/"
          target: ${{ secrets.TARGET_PATH }}

      - name: Déployer l'application sur le NAS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Donner les permissions d'exécution au binaire
            chmod +x ${{ secrets.TARGET_PATH }}/published/${{ secrets.APP_NAME }}

            # Identifier le PID du processus écoutant sur le port 5002 et le terminer si trouvé
            PID=$(netstat -anp | grep ':5002' | awk '{print $7}' | cut -d'/' -f1)
            if [ -n "$PID" ]; then
              kill "$PID" || kill -9 "$PID"
              echo "Processus $PID arrêté."
            else
              echo "Aucun processus trouvé sur le port 5002."
            fi

            # Attendre que le port 5002 soit libéré
            while netstat -an | grep ':5002' | grep -q 'LISTEN'; do
              echo "En attente de la libération du port 5002..."
              sleep 1
            done

            # Lancer la nouvelle instance de l'application
            nohup "${TARGET_PATH}/published/${APP_NAME}" --urls "http://*:5002" > "${TARGET_PATH}/${APP_NAME}.log" 2>&1 &
            echo "Nouvelle instance de l'application lancée sur le port 5002."
